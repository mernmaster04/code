import java.text.SimpleDateFormat;  // SimpleDateFormat is used to convert date/time in milliseconds into a human-readable format like
import java.util.*;          //  imports all utility classes like Date, which is used here.

public class BerkeleyAlgorithm {   // This is the main class that contains the Berkeley clock synchronization algorithm.

// Defines a Node (either master or slave), which has a clock time in milliseconds.
    static class Node {
        long clockTime; // Variable store current Time of node (like master or slave) in milliseconds

        public Node(long time) {   // (constructor) Initializes the node's clock with a given time. 
            this.clockTime = time;
        }

        public long getTime() {   //  Getter Method -> Returns the current clock time (in milliseconds) of the node. 
            return clockTime;
        }

        public void setTime(long newTime) {  //  Setter Method: -> Sets (updates) the node's clock time.
            this.clockTime = newTime;
        }

    // Converts the time (in milliseconds) into a human-readable format like "14:25:30:123".
        public String getFormattedTime() {   
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss:SSS");
            return sdf.format(new Date(clockTime));
        }
    }

    public static void main(String[] args) {   // This is the entry point of the program.
        // Simulate current time
        long baseTime = System.currentTimeMillis();  // Gets the current time in milliseconds (1714904500000) from the system clock

        // Create nodes with some simulated drift
        Node master = new Node(baseTime); // Creates the master node with the current time of system.

        // Declares an array named slaves, which can hold multiple Node objects.
        Node[] slaves = {   // Creates 3 slave nodes with time drift:
                new Node(baseTime - 200), // 200 ms behind from current time
                new Node(baseTime + 100), // 100 ms min ahead
                new Node(baseTime - 300) // 300 ms behind
        };

        // Display initial times
        System.out.println("Initial Times:");
        System.out.println("Master: " + master.getFormattedTime());
        for (int i = 0; i < slaves.length; i++) {
            System.out.println("Slave " + (i + 1) + ": " + slaves[i].getFormattedTime() +
                    " (Diff: " + (slaves[i].getTime() - master.getTime()) + " ms)");
        }

        // Step 1: Master polls slaves and collects their times
        // Master collects the times of all slave nodes and stores them in an array.
        long[] slaveTimes = new long[slaves.length];
        for (int i = 0; i < slaves.length; i++) {
            slaveTimes[i] = slaves[i].getTime();
        }

        // Step 2: Master calculates offset from its time for each slave
        // Calculates the time difference (offset) of each slave from the master and adds it up.
        long sumOffsets = 0;
        for (long time : slaveTimes) {
            sumOffsets += (time - master.getTime());
        }

        // Average offset including master
        long avgOffset = sumOffsets / (slaves.length + 1);
        System.out.println("\nCalculated Average Offset: " + avgOffset + " ms");

        // Step 3: Compute synchronized time and apply it to all nodes
        long synchronizedTime = master.getTime() + avgOffset;
        master.setTime(synchronizedTime);
        for (Node slave : slaves) {
            slave.setTime(synchronizedTime);
        }

        // Display synchronized times
        System.out.println("\nSynchronized Times:");
        System.out.println("Master: " + master.getFormattedTime());
        for (int i = 0; i < slaves.length; i++) {
            System.out.println("Slave " + (i + 1) + ": " + slaves[i].getFormattedTime() +
                    " (Now aligned)");
        }
    }
}

/*
1. Offset is the difference in time between a slave nodeâ€™s clock and the masterâ€™s clock. (e.g 200ms)
Objective:
To implement the Berkeley Algorithm to synchronize clocks in a distributed system

What is the Berkeley Algorithm?
The Berkeley Algorithm is a decentralized clock synchronization technique used in distributed systems. It assumes that no machine has an accurate clock, and instead computes an average of all available clocks to synchronize all nodes.

ðŸ§© Working Steps of Berkeley Algorithm:
1. One node is elected as the Master.
2. The master polls all other nodes (slaves) to get their local times.
3. The master receives all clock times and computes the average (excluding any faulty values if needed).
4. It calculates offset for each node (difference between average time and that node's time).
5. It sends the offset to each node, which then adjusts its clock accordingly.

Diagram (Optional):
        Master Node
             |
  -------------------------
  |           |           |
Slave 1    Slave 2     Slave 3

Step 1: Master polls time from each slave
Step 2: Master computes average
Step 3: Sends offset to each node
Step 4: Each node adjusts its time


This way, all clocks are aligned to the average global time.
Tools and Programming Language Used:
Tool / Environment	            Description
Programming Language	       Java (JDK 8 or above)
IDE (Optional)	            Eclipse / IntelliJ / NetBeans
OS	                        Windows / Linux / macOS
Compiler	                javac (Java compiler)


code
Result:
The Java program successfully implements the Berkeley Algorithm. It synchronizes the clocks of all nodes (master and slaves) to a common average time by computing and applying clock offsets.

Conclusion:
Using Java, we implemented the Berkeley Algorithm to synchronize multiple system clocks by calculating a global average time and adjusting each node's clock with an offset.


Q: What is clock drift?
A: Clock drift is the gradual difference in time between clocks due to hardware variations.

Q: Why is synchronization important in distributed systems?
A: To maintain consistency in operations like logging, authentication, and scheduling.

Q: What role does the master node play in the Berkeley Algorithm?
A: It collects time from all slaves, computes the average, and sends offset instructions.

Q: How is Berkeley Algorithm different from Cristianâ€™s Algorithm?
A: Cristianâ€™s uses a time server; Berkeley computes time by averaging all node clocks.

Q: Can this algorithm tolerate faulty nodes?
A: Yes, faulty nodes can be detected and excluded from the average calculation.
*/
